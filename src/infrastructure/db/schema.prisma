generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int   @id @default(autoincrement())
  email           String @unique
  firstName           String
  lastName String
  image          String?
  color          String
  projects       Project[]  
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  issueReporters Issue[]    @relation("issue_reporter")
  issueAssignees Issue[]    @relation("issue_assignee")
  issueComments  Comment[]
}

model Project {
  id          Int        @id @default(autoincrement())
  name        String
  description String?   
  users       User[]       
  categories  Category[]
  image       String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Category {
  id        Int          @id @default(autoincrement())
  project   Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int          
  type      String          @default("TODO") // TODO: apply check constraint to emulate enum
  name      String
  order     Int
  issues    Issue[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model Issue {
  id          Int        @id @default(autoincrement())
  category    Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  Int       
  name        String
  description String?
  reporter    User          @relation("issue_reporter", fields: [reporterId], references: [id])
  reporterId  Int       
  asignee     User          @relation("issue_assignee", fields: [asigneeId], references: [id])
  asigneeId   Int        
  comments    Comment[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  priority    Priority      @relation(fields: [priorityId], references: [id])
  priorityId  Int        
}

model Comment {
  id        Int    @id @default(autoincrement())
  issue     Issue     @relation(fields: [issueId], references: [id], onDelete: Cascade)
  issueId   Int   
  user      User      @relation(fields: [userId], references: [id])
  userId    Int    
  message   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Priority {
  id        Int    @id @default(autoincrement())
  order     Int
  name      String
  issues    Issue[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
